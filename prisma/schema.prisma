// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
 // id                 String  @id @default(cuid())

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
model User {
  id   Int @id @default(autoincrement())
  name String? 
  image String? 
  email String @unique
  emailVerified DateTime?  
  password String? 
  telephone String?
  bio String?  
  role String @default("Student")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sessions Session[]
  accounts Account[]
  ticket Ticket[]
}
model EventTemplate {
  id Int @id @default(autoincrement())
  eventtype EventType @default(Group)
  length Int
  color String?
  price Float
  image String?
  tag String
  title String?
  location String?
  description String?
  visible Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teachersid Int[]
  events Event[]
}
model Event {
   id Int @id @default(autoincrement())
   date String
   templateID Int
   tag String
   image String?
   eventtype EventType @default(Group)
   template EventTemplate @relation(fields: [templateID], references: [id] )
   tables Int[]
   tableName String? @default("Table")
   tickets Ticket[]
   seatmap String?
}
model Ticket {
  id Int @id @default(autoincrement())
  eventID Int 
  seat Int?
  table Int?
  userID Int?
  personNote String?
  purchasedAt String
  invoice String?
  event Event @relation(fields: [eventID], references: [id] )
  user User? @relation(fields: [userID], references: [id] )
}

model SettingVar {
  id Int @id @default(autoincrement())
  front_templates_ids Int[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
enum EventType {
  Private
  Group
  Party
}
model Account {
  id Int @id @default(autoincrement())
  userId             Int   
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?   
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id Int @id @default(autoincrement())
  sessionToken String @unique
  userId Int
  expires DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id Int @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Picture {
  id        String  @id @default(cuid())
  file      String
  file_name String
}